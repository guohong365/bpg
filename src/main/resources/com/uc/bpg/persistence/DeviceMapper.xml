<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.uc.bpg.persistence.DeviceMapper">
  <resultMap id="deviceDetail" type="com.uc.bpg.domain.Device">
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="UUID" jdbcType="CHAR" property="uuid" />
    <result column="SERIAL_NO" jdbcType="VARCHAR" property="serialNo" />
    <result column="NAME" jdbcType="VARCHAR" property="name" />
    <result column="VALID" jdbcType="BIT" property="valid" />
    <result column="TYPE" jdbcType="INTEGER" property="type" />
    <result column="HOTEL" jdbcType="INTEGER" property="hotel" />
    <result column="ROOM" jdbcType="INTEGER" property="room" />
    <result column="PUBLIC_USAGE" jdbcType="BIT" property="publicUsage" />
    <result column="INPUTER" jdbcType="INTEGER" property="inputer"/>
    <result column="INPUT_TIME" jdbcType="TIMESTAMP" property="inputTime"/>
    <result column="MODIFIER" jdbcType="INTEGER" property="modifier"/>
    <result column="MODIFY_TIME" jdbcType="TIMESTAMP" property="modifyTime"/>
    <result column="INPUTER_NAME" jdbcType="VARCHAR" property="inputerName"/>
    <result column="MODIFIER_NAME" jdbcType="VARCHAR" property="modifierName"/>
    <result column="HOTEL_NAME" jdbcType="VARCHAR" property="hotelName"/>
    <result column="TYPE_NAME" jdbcType="VARCHAR" property="typeName"/>
    <result column="ROOM_NO" jdbcType="VARCHAR" property="roomNo"/>
    <result column="STATUS" jdbcType="INTEGER" property="status"/>
    <association property="canAllotPublic" column="HOTEL" notNullColumn="true" jdbcType="BIT" select="selectCanAllotPublic" />
  </resultMap>
    <sql id="orderBySql">
    <if test="queryForm!=null and queryForm.queryOrderByClause!=null and !queryForm.queryOrderByClause.empty">
      order by ${queryForm.queryOrderByClause}
    </if>
  </sql>  
  <sql id="selectSql">
     select
     a.ID, 
     a.UUID, 
     a.SERIAL_NO, 
     a.VALID, 
     a.TYPE, 
     a.HOTEL, 
     a.ROOM, 
     a.PUBLIC_USAGE, 
     a.INPUTER, 
     a.INPUT_TIME, 
     a.MODIFIER, 
     a.MODIFY_TIME,     
     b.NAME as TYPE_NAME, 
     b.PRODUCT as NAME,
     c.NAME as HOTEL_NAME, 
     d.ROOM_NO as ROOM_NO,
     IF(g.STATUS=0 and g.BATTERY = 1, 15, g.STATUS) as STATUS,   
     e.NAME as INPUTER_NAME,
     f.NAME as MODIFIER_NAME
     from t_device a
     left join t_type b on a.type = b.id
     left join t_orgnization c on a.hotel = c.id
     left join t_room d on a.room = d.id  
     left join t_user e on a.INPUTER = e.ID
     left join t_user f on a.MODIFIER = f.ID
     left join (select t.DEVICE, t.STATUS, t.BATTERY 
                from t_device_status t 
                left join (select DEVICE, MAX(ID) as ID from t_device_status group by DEVICE) s on s.ID = t.ID 
                where s.ID is not null) g on g.DEVICE = a.ID
  </sql>
  <sql id="whereSql">
    <where>
      <trim prefixOverrides="and">
        <choose>
          <when test="queryForm.queryHotel !=null">
            and a.HOTEL = #{queryForm.queryHotel, jdbcType=INTEGER}
          </when>
          <when test="queryForm.queryHotelName !=null">
            and c.NAME like '%${queryForm.queryHotelName}%'
          </when>
        </choose>
        <if test="queryForm.queryName !=null">
          and b.PRODUCT like '%${queryForm.queryName}%'
        </if>
        <if test="queryForm.querySerialNo !=null">
          and a.SERIAL_NO like '%${queryForm.querySerialNo}%'
        </if>
        <if test="queryForm.queryStatus !=null">
          <choose>
            <when test="queryForm.queryStatus == 1">
              and g.STATUS = 0
            </when>
            <when test="queryForm.queryStatus == 2">
              and g.STATUS = 15
            </when>
            <when test="queryForm.queryStatus == 3">
              and (g.STATUS &gt;= 1 and g.STATUS &lt;= 8) 
            </when>
            <when test="queryForm.queryStatus == 4">
              and (g.STATUS is null or not (g.STATUS &gt;= 0 and g.STATUS &lt;=8))
            </when>
          </choose>
        </if>
        <if test="queryForm.queryType !=null">
          and a.TYPE = #{queryForm.queryType,jdbcType=INTEGER}
        </if>
        <if test="!queryForm.queryAll">
          and a.VALID
        </if>
      </trim>
    </where>  
  </sql>
  <select id="selectCountOptimized" parameterType="map" resultType="java.lang.Long">
    select COUNT(*)
    from t_device a
     left join t_type b on a.type = b.id
     left join t_orgnization c on a.hotel = c.id
     left join t_room d on a.room = d.id  
     left join t_user e on a.INPUTER = e.ID
     left join t_user f on a.MODIFIER = f.ID
     left join (select t.DEVICE, t.STATUS, t.BATTERY 
                from t_device_status t 
                left join (select DEVICE, MAX(ID) as ID from t_device_status group by DEVICE) s on s.ID = t.ID 
                where s.ID is not null) g on g.DEVICE = a.ID         
     <include refid="whereSql" /> 
  </select>
  <select id="selectOptimized" parameterType="map" resultMap="deviceDetail">
    <include refid="selectSql" />
    <include refid="whereSql" />
    <include refid="orderBySql" />
    limit ${offset}, ${count}
  </select>
  <select id="selectById" parameterType="java.lang.Long" resultMap="deviceDetail">
    <include refid="selectSql" />
    where a.ID = #{id,jdbcType=INTEGER}
  </select>

  <insert id="insertDetail" parameterType="com.uc.bpg.domain.Device">
    insert into t_device (UUID, SERIAL_NO, VALID, TYPE, PUBLIC_USAGE, INPUTER, INPUT_TIME)
    values (#{uuid,jdbcType=CHAR}, #{serialNo,jdbcType=VARCHAR}, true, 
            #{type,jdbcType=INTEGER}, false, 
            #{inputer,jdbcType=INTEGER}, #{inputTime, jdbcType=TIMESTAMP});
    insert into t_allot_history
      (UUID, OPERATION, DEVICE, HOTEL, ROOM, OPERATE_TIME, OPERATOR)
      select uuid(), '新增', ID, null, null, #{inputTime,jdbcType=TIMESTAMP}, #{inputer,jdbcType=INTEGER} 
      from t_device where UUID=#{uuid,jdbcType=CHAR};             
  </insert>
  <update id="updateDetailSelective" parameterType="com.uc.bpg.domain.Device">
    update t_device
    <set>
      <if test="serialNo != null">
        SERIAL_NO = #{serialNo,jdbcType=VARCHAR},
      </if>
      <if test="valid != null">
        VALID = #{valid,jdbcType=BIT},
      </if>
      <if test="type != null">
        TYPE = #{type,jdbcType=INTEGER},
      </if>
      <if test="hotel != null">
        HOTEL = #{hotel,jdbcType=INTEGER},
      </if>
      <if test="room != null">
        ROOM = #{room,jdbcType=INTEGER},
      </if>
      <if test="publicUsage != null">
        PUBLIC_USAGE = #{publicUsage,jdbcType=BIT},
      </if>
      <if test="modifier !=null" >
        MODIFIER = #{modifier, jdbcType=INTEGER},
      </if>
      <if test="modifyTime !=null">
        MODIFY_TIME = #{modifyTime,jdbcType=TIMESTAMP},
      </if>     
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateDetail" parameterType="com.uc.bpg.domain.Device">
    update t_device
    set 
      SERIAL_NO = #{serialNo,jdbcType=VARCHAR},
      VALID = #{valid,jdbcType=BIT},
      TYPE = #{type,jdbcType=INTEGER},
      HOTEL = #{hotel,jdbcType=INTEGER},
      ROOM = #{room,jdbcType=INTEGER},
      PUBLIC_USAGE = #{publicUsage,jdbcType=BIT},
      MODIFIER=#{modifier,jdbcType=INTEGER},
      MODIFY_TIME=#{modifyTime,jdbcType=TIMESTAMP}
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateAllot" parameterType="map">
    update t_device
    set
      HOTEL = #{device.hotel,jdbcType=INTEGER},
      ROOM = #{device.room,jdbcType=INTEGER},
      PUBLIC_USAGE = #{device.publicUsage,jdbcType=BIT},
      MODIFIER=#{device.modifier,jdbcType=INTEGER},
      MODIFY_TIME=#{device.modifyTime,jdbcType=TIMESTAMP}
    where ID = #{device.id,jdbcType=INTEGER};
    insert into t_allot_history  (UUID, OPERATION, DEVICE, HOTEL, ROOM, OPERATE_TIME, OPERATOR)
    values(uuid(), #{operation,jdbcType=CHAR}, #{device.id,jdbcType=INTEGER}, 
    #{device.hotel,jdbcType=INTEGER}, #{device.room,jdbcType=INTEGER},
    #{device.modifyTime,jdbcType=TIMESTAMP}, #{device.modifier,jdbcType=INTEGER});    
  </update>
  <insert id="insertBatchAdd" parameterType="map">
    <foreach collection="devices" item="detail">  
      insert into t_device 
      (UUID, SERIAL_NO, VALID, TYPE, HOTEL, ROOM, PUBLIC_USAGE, INPUTER, INPUT_TIME)
      values
       (#{detail.uuid,jdbcType=CHAR}, #{detail.serialNo,jdbcType=VARCHAR}, true,
        #{detail.type,jdbcType=INTEGER}, null, null, false, 
        #{detail.inputer,jdbcType=INTEGER}, #{detail.inputTime, jdbcType=TIMESTAMP});
      insert into t_allot_history
      (UUID, OPERATION, DEVICE, HOTEL, ROOM, OPERATE_TIME, OPERATOR)
      select uuid(), '新增', ID, null, null, #{detail.inputTime,jdbcType=TIMESTAMP}, #{detail.inputer,jdbcType=INTEGER} 
      from t_device where UUID=#{detail.uuid,jdbcType=CHAR};  
    </foreach>      
  </insert>
  <update id="updateBatchAllot" parameterType="map">
    <foreach collection="devices" item="device">
      update t_device 
      set 
      HOTEL=#{device.hotel,jdbcType=INTEGER},
      ROOM =#{device.room,jdbcType=INTEGER},
      MODIFY_TIME=#{device.modifyTime, jdbcType=TIMESTAMP},
      MODIFIER=#{device.modifier,jdbcType=INTEGER}
      where 
      SERIAL_NO = #{device.serialNo,jdbcType=VARCHAR};
      insert into t_allot_history
      (UUID, OPERATION, DEVICE, HOTEL, ROOM, OPERATE_TIME, OPERATOR)
      select uuid(), '分配', ID, #{device.hotel,jdbcType=INTEGER}, #{device.room,jdbcType=INTEGER}, 
      #{device.modifyTime, jdbcType=TIMESTAMP},#{device.modifier,jdbcType=INTEGER}
      from t_device where SERIAL_NO = #{device.serialNo,jdbcType=VARCHAR};
    </foreach>
  </update>
  <update id="updateBatchWithdraw" parameterType="map">
    <foreach collection="devices" item="device">
      update t_device 
      set 
      HOTEL = null,
      MODIFY_TIME=#{device.modifyTime, jdbcType=TIMESTAMP},
      MODIFIER=#{device.modifier,jdbcType=INTEGER}
      where SERIAL_NO=#{device.serialNo,jdbcType=VARCHAR};
      insert into t_allot_history
      (UUID, OPERATION, DEVICE, HOTEL, ROOM, OPERATE_TIME, OPERATOR)
      select uuid(), '收回', ID, null, null, 
      #{device.modifyTime, jdbcType=TIMESTAMP},#{device.modifier,jdbcType=INTEGER}
      from t_device where SERIAL_NO = #{device.serialNo,jdbcType=VARCHAR};
    </foreach>
  </update>
  <update id="updateBatchScrap" parameterType="map">
    <foreach collection="devices" item="device">
      update t_device 
      set 
      VALID = false, 
      MODIFY_TIME=#{device.modifyTime, jdbcType=TIMESTAMP},
      MODIFIER=#{device.modifier,jdbcType=INTEGER}
      where SERIAL_NO=#{device.serialNo,jdbcType=VARCHAR};
      insert into t_allot_history
      (UUID, OPERATION, DEVICE, HOTEL, ROOM, OPERATE_TIME, OPERATOR)
      select uuid(), '报废', ID, null, null, 
      #{device.modifyTime, jdbcType=TIMESTAMP},#{device.modifier,jdbcType=INTEGER}
      from t_device where SERIAL_NO = #{device.serialNo,jdbcType=VARCHAR};
    </foreach>
  </update>
  <select id="selectExistsSerial" resultType="java.lang.Boolean" parameterType="map">
    select count(*) &gt; 0 from t_device where SERIAL_NO=#{serial,jdbcType=VARCHAR}
  </select>
  <select id="selectAlreadyAllot" parameterType="map" resultType="java.lang.Boolean">
    select count(*) &gt; 0 from t_device 
    where 
    SERIAL_NO=#{serial,jdbcType=VARCHAR}
    <choose>
      <when test="hotel != null">
        and HOTEL = #{hotel,jdbcType=INTEGER}
      </when>
      <otherwise>
        and HOTEL is not null
      </otherwise>
    </choose>    
  </select>
  <select id="selectAllocableRooms" parameterType="java.lang.Long" resultMap="com.uc.bpg.persistence.RoomMapper.roomDetail">
    select ID, STOREY, ROOM_NO from t_room a
    where VALID and HOTEL = #{hotelId,jdbcType=INTEGER} and not exists(select 1 from t_device where ROOM = a.ID) 
  </select>
  <select id="selectCanAllotPublic" parameterType="java.lang.Long" resultType="java.lang.Boolean">
    select (select count(*) from t_device where HOTEL=#{hotel,jdbcType=INTEGER} and PUBLIC_USAGE) &lt; 
           (select PUBLIC_USAGE from t_orgnization where ID=#{hotel,jdbcType=INTEGER})  
  </select>
  <select id="selectIdBySerial" parameterType="java.lang.String" resultType="java.lang.Long">
    select ID from t_device where SERIAL_NO=#{serial,jdbcType=VARCHAR}
  </select>
  <select id="selectBySerial" parameterType="java.lang.String" resultMap="deviceDetail">    
    <include refid="selectSql" />
    where a.SERIAL_NO = #{serial,jdbcType=VARCHAR}
  </select>
  <select id="selectAllocatedDevices" parameterType="map" resultMap="deviceDetail">
    <include refid="selectSql" />
    <where>
    <trim prefixOverrides="and">
      <choose>
      <when test="hotel !=null">
        and a.HOTEL = #{hotel, jdbcType=INTEGER}      
        and a.ROOM is not null
      </when>
      <otherwise>
        and a.HOTEL is not null
      </otherwise>
      </choose>  
    </trim>  
    </where>
  </select>
  <select id="selectAllocableDevices" parameterType="map" resultMap="deviceDetail">
    <include refid="selectSql" />
    where 
    a.HOTEL =#{hotel, jdbcType=INTEGER}
    and a.ROOM is null and not a.PUBLIC_USAGE
  </select>
  <update id="updateWithdrawAll" parameterType="map" >
    set @modify_time=NOW();
    update t_device 
      set 
      ROOM = null,
      MODIFY_TIME=@modify_time,
      MODIFIER=#{modifier,jdbcType=INTEGER}
      where ID in (<foreach collection="devices" item="device">${device.id}</foreach>);
    insert into t_allot_history
      (UUID, OPERATION, DEVICE, HOTEL, ROOM, OPERATE_TIME, OPERATOR)
    values
    <foreach collection="devices" item="device" open="(" close=")" separator=",">
    uuid(), '收回', #{device.id, jdbcType=INTEGER}, #{device.hotel,jdbcType=INTEGER}, null, 
    @modify_time, #{modifier,jdbcType=INTEGER}
    </foreach>;
  </update>
</mapper>