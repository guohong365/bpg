<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.uc.bpg.persistence.RoleMapper">
	<resultMap id="roleDetail" type="com.uc.bpg.domain.RoleImpl">
		<id column="ID" jdbcType="INTEGER" property="id" />
		<result column="UUID" jdbcType="CHAR" property="uuid" />
		<result column="NAME" jdbcType="VARCHAR" property="name" />
		<result column="DESCRIPTION" jdbcType="VARCHAR" property="description" />
		<result column="VALID" jdbcType="BIT" property="valid" />
		<result column="INTERNAL" jdbcType="BIT" property="internal" />
	</resultMap>
	<resultMap type="com.uc.bpg.domain.FunctionAvailable" id="functionAvailable">
		<result column="ID" jdbcType="INTEGER" property="id" />
		<result column="NAME" jdbcType="VARCHAR" property="name" />
		<result column="DESCRIPTION" jdbcType="VARCHAR" property="description" />
		<result column="AVAILABLE" jdbcType="BIT" property="available" />
	</resultMap>
	<sql id="orderBySql">
		<if	test="queryForm!=null and queryForm.queryOrderByClause!=null and !queryForm.queryOrderByClause.empty">
			order by ${queryForm.queryOrderByClause}
		</if>
	</sql>

	<sql id="selectSql">
		select ID, UUID, NAME, DESCRIPTION, VALID, INTERNAL from t_role
	</sql>
	<sql id="whereSql">
	<where>
      <trim prefixOverrides="and">
        <if test="!queryForm.queryAll">
          and VALID
        </if>
        <if test="queryForm.queryInternal">
          and INTERNAL 
        </if>
        <if test="queryForm.queryName">
          and NAME like '%${queryForm.queryName}%'
        </if>
      </trim>
    </where> 
	</sql>
	<select id="selectCountOptimized" parameterType="com.uc.bpg.forms.RoleQueryForm" resultType="java.lang.Long">
	  select COUNT(*) from t_role
	  <include refid="whereSql" />
	</select>
	<select id="selectOptimized" parameterType="map" resultMap="roleDetail">
		<include refid="selectSql" />
		<include refid="whereSql"/>
		<include refid="orderBySql" />
		limit ${offset}, ${count}
	</select>
	<select id="selectById" parameterType="java.lang.Long"	resultMap="roleDetail">
		<include refid="selectSql" />
		where ID = #{id,jdbcType=INTEGER}
	</select>

	<sql id="updateRoleFunctions">
		<if test="functions!=null">
			delete from t_role_func where ROLE=#{id, jdbcType=INTEGER};
			<foreach collection="functions" item="func">
				<if test="func.available">
					insert into t_role_func (ROLE, FUNC) values
					(#{id,jdbcType=INTEGER},#{func.id,jdbcType=INTEGER});
				</if>
			</foreach>
		</if>
	</sql>
	<insert id="insertDetail" parameterType="com.uc.bpg.domain.RoleImpl">
		insert into t_role (UUID, NAME, DESCRIPTION, VALID, INTERNAL )
		values (#{uuid,jdbcType=CHAR}, #{name,jdbcType=VARCHAR},
		#{description,jdbcType=VARCHAR}, true, false);
		<if test="functions!=null">
			<foreach collection="functions" item="func">
				<if test="func.available">
					insert into t_role_func(ROLE, FUNC) select ID, ${func.id} from t_role
					where UUID=#{uuid,jdbcType=CHAR};
				</if>
			</foreach>
		</if>
	</insert>

	<update id="updateDetailSelective" parameterType="com.uc.bpg.domain.RoleImpl">
		update t_role
		<set>
			<if test="name != null">
				NAME = #{name,jdbcType=VARCHAR},
			</if>
			<if test="description != null">
				DESCRIPTION = #{description,jdbcType=VARCHAR},
			</if>
			<if test="valid != null">
				VALID = #{valid,jdbcType=BIT},
			</if>
			<if test="internal != null">
				INTERNAL = #{internal,jdbcType=BIT},
			</if>
		</set>
		where ID = #{id,jdbcType=INTEGER};
		<include refid="updateRoleFunctions" />
	</update>
	<update id="updateDetail" parameterType="com.uc.bpg.domain.RoleImpl">
		update t_role
		set
		NAME = #{name,jdbcType=VARCHAR},
		DESCRIPTION = #{description,jdbcType=VARCHAR},
		VALID = #{valid,jdbcType=BIT},
		INTERNAL = #{internal,jdbcType=BIT}
		where ID = #{id,jdbcType=INTEGER};
		<include refid="updateRoleFunctions" />
	</update>

	<select id="selectFunctions" parameterType="map" resultMap="functionAvailable">
		<choose>
			<when test="roleId!=null and roleId &gt; 0">
				select a.ID, a.NAME, a.DESCRIPTION, if(not b.ROLE is null, true,
				false) as AVAILABLE
				from t_function a
				left join t_role_func b on b.FUNC=a.ID and
				b.ROLE=#{roleId,jdbcType=INTEGER}
				where a.VALID
				<if test="!isAll">
					and not b.ROLE is null
				</if>
			</when>
			<otherwise>
				select ID, NAME, DESCRIPTION, false as AVAILABLE from t_function
				where VALID
			</otherwise>
		</choose>
	</select>

</mapper>